{"meta":{"title":"个人博客","subtitle":"BCH","description":"bch_bk","author":"BCH","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2019-03-22T11:47:08.788Z","updated":"2019-03-25T14:05:35.679Z","comments":true,"path":"2019/03/22/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"REACT_setState","slug":"vue-笔记-1","date":"2018-03-22T12:33:57.000Z","updated":"2019-03-25T14:24:36.092Z","comments":true,"path":"2018/03/22/vue-笔记-1/","link":"","permalink":"http://yoursite.com/2018/03/22/vue-笔记-1/","excerpt":"","text":"setStatesetState 在 React 中是经常使用的一个 API，但是它存在一些的问题经常会导致初学者出错，核心原因就是因为这个 API 是异步的。首先 setState 的调用并不会马上引起 state 的改变，并且如果你一次调用了多个 setState ，那么结果可能并不如你期待的一样。12345678handle() &#123; // 初始化 `count` 为 0 console.log(this.state.count) // -&gt; 0 this.setState(&#123; count: this.state.count + 1 &#125;) this.setState(&#123; count: this.state.count + 1 &#125;) this.setState(&#123; count: this.state.count + 1 &#125;) console.log(this.state.count) // -&gt; 0&#125; 第一，两次的打印都为 0，因为 setState 是个异步 API，只有同步代码运行完毕才会执行。setState 异步的原因我认为在于，setState 可能会导致 DOM 的重绘，如果调用一次就马上去进行重绘，那么调用多次就会造成不必要的性能损失。设计成异步的话，就可以将多次调用放入一个队列中，在恰当的时候统一进行更新过程。第二，虽然调用了三次 setState ，但是 count 的值还是为 1。因为多次调用会合并为一次，只有当更新结束后 state 才会改变，三次调用等同于如下代码123456Object.assign( &#123;&#125;, &#123; count: this.state.count + 1 &#125;, &#123; count: this.state.count + 1 &#125;, &#123; count: this.state.count + 1 &#125;,) 当然你也可以通过以下方式来实现调用三次 setState 使得 count 为 312345handle() &#123; this.setState((prevState) =&gt; (&#123; count: prevState.count + 1 &#125;)) this.setState((prevState) =&gt; (&#123; count: prevState.count + 1 &#125;)) this.setState((prevState) =&gt; (&#123; count: prevState.count + 1 &#125;))&#125; 如果你想在每次调用 setState 后获得正确的 state ，可以通过如下代码实现12345handle() &#123; this.setState((prevState) =&gt; (&#123; count: prevState.count + 1 &#125;), () =&gt; &#123; console.log(this.state) &#125;)&#125;","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"}]}]}