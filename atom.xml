<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>BCH</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.bochunhao.cn/"/>
  <updated>2019-03-26T06:26:39.973Z</updated>
  <id>http://blog.bochunhao.cn/</id>
  
  <author>
    <name>BCH</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue_v-show_v-if</title>
    <link href="http://blog.bochunhao.cn/2019/06/02/vue-v-show-v-if/"/>
    <id>http://blog.bochunhao.cn/2019/06/02/vue-v-show-v-if/</id>
    <published>2019-06-02T13:23:24.000Z</published>
    <updated>2019-03-26T06:26:39.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="v-show-与-v-if-区别"><a href="#v-show-与-v-if-区别" class="headerlink" title="v-show 与 v-if 区别"></a>v-show 与 v-if 区别</h3><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><h5 id="v-show-只是在-display-none-和-display-block-之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换-CSS，DOM-还是一直保留着的。所以总的来说-v-show-在初始渲染时有更高的开销，但是切换开销很小，更适合于频繁切换的场景。"><a href="#v-show-只是在-display-none-和-display-block-之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换-CSS，DOM-还是一直保留着的。所以总的来说-v-show-在初始渲染时有更高的开销，但是切换开销很小，更适合于频繁切换的场景。" class="headerlink" title="v-show 只是在  display: none  和  display: block  之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换 CSS，DOM 还是一直保留着的。所以总的来说  v-show  在初始渲染时有更高的开销，但是切换开销很小，更适合于频繁切换的场景。"></a>v-show 只是在  display: none  和  display: block  之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换 CSS，DOM 还是一直保留着的。所以总的来说  v-show  在初始渲染时有更高的开销，但是切换开销很小，更适合于频繁切换的场景。</h5><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><h5 id="v-if-的话就得说到-Vue-底层的编译了。当属性初始为-false-时，组件就不会被渲染，直到条件为-true，并且切换条件时会触发销毁-挂载组件，所以总的来说在切换时开销更高，更适合不经常切换的场景。"><a href="#v-if-的话就得说到-Vue-底层的编译了。当属性初始为-false-时，组件就不会被渲染，直到条件为-true，并且切换条件时会触发销毁-挂载组件，所以总的来说在切换时开销更高，更适合不经常切换的场景。" class="headerlink" title="v-if 的话就得说到 Vue 底层的编译了。当属性初始为  false  时，组件就不会被渲染，直到条件为  true，并且切换条件时会触发销毁/挂载组件，所以总的来说在切换时开销更高，更适合不经常切换的场景。"></a>v-if 的话就得说到 Vue 底层的编译了。当属性初始为  false  时，组件就不会被渲染，直到条件为  true，并且切换条件时会触发销毁/挂载组件，所以总的来说在切换时开销更高，更适合不经常切换的场景。</h5><h4 id="并且基于-v-if-的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。"><a href="#并且基于-v-if-的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。" class="headerlink" title="并且基于  v-if  的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。"></a>并且基于  v-if  的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;v-show-与-v-if-区别&quot;&gt;&lt;a href=&quot;#v-show-与-v-if-区别&quot; class=&quot;headerlink&quot; title=&quot;v-show 与 v-if 区别&quot;&gt;&lt;/a&gt;v-show 与 v-if 区别&lt;/h3&gt;&lt;h4 id=&quot;v-show&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="vue" scheme="http://blog.bochunhao.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue_lifecycle</title>
    <link href="http://blog.bochunhao.cn/2019/03/26/vue-lifecycle/"/>
    <id>http://blog.bochunhao.cn/2019/03/26/vue-lifecycle/</id>
    <published>2019-03-26T05:56:41.000Z</published>
    <updated>2019-03-26T05:57:31.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><h5 id="在-beforeCreate-钩子函数调用的时候，是获取不到-props-或者-data-中的数据的，因为这些数据的初始化都在-initState-中。"><a href="#在-beforeCreate-钩子函数调用的时候，是获取不到-props-或者-data-中的数据的，因为这些数据的初始化都在-initState-中。" class="headerlink" title="在  beforeCreate  钩子函数调用的时候，是获取不到  props  或者  data  中的数据的，因为这些数据的初始化都在  initState  中。"></a>在  beforeCreate  钩子函数调用的时候，是获取不到  props  或者  data  中的数据的，因为这些数据的初始化都在  initState  中。</h5><h5 id="然后会执行-created-钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以是看不到的。"><a href="#然后会执行-created-钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以是看不到的。" class="headerlink" title="然后会执行  created  钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以是看不到的。"></a>然后会执行  created  钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以是看不到的。</h5><h5 id="接下来会先执行-beforeMount-钩子函数，开始创建-VDOM，最后执行-mounted-钩子，并将-VDOM-渲染为真实-DOM-并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。"><a href="#接下来会先执行-beforeMount-钩子函数，开始创建-VDOM，最后执行-mounted-钩子，并将-VDOM-渲染为真实-DOM-并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。" class="headerlink" title="接下来会先执行  beforeMount  钩子函数，开始创建 VDOM，最后执行  mounted  钩子，并将 VDOM 渲染为真实 DOM 并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。"></a>接下来会先执行  beforeMount  钩子函数，开始创建 VDOM，最后执行  mounted  钩子，并将 VDOM 渲染为真实 DOM 并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。</h5><h5 id="接下来是数据更新时会调用的钩子函数-beforeUpdate-和-updated，这两个钩子函数没什么好说的，就是分别在数据更新前和更新后会调用。"><a href="#接下来是数据更新时会调用的钩子函数-beforeUpdate-和-updated，这两个钩子函数没什么好说的，就是分别在数据更新前和更新后会调用。" class="headerlink" title="接下来是数据更新时会调用的钩子函数  beforeUpdate  和  updated，这两个钩子函数没什么好说的，就是分别在数据更新前和更新后会调用。"></a>接下来是数据更新时会调用的钩子函数  beforeUpdate  和  updated，这两个钩子函数没什么好说的，就是分别在数据更新前和更新后会调用。</h5><h5 id="另外还有-keep-alive-独有的生命周期，分别为-activated-和-deactivated-。用-keep-alive-包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行-deactivated-钩子函数，命中缓存渲染后会执行-actived-钩子函数。"><a href="#另外还有-keep-alive-独有的生命周期，分别为-activated-和-deactivated-。用-keep-alive-包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行-deactivated-钩子函数，命中缓存渲染后会执行-actived-钩子函数。" class="headerlink" title="另外还有  keep-alive  独有的生命周期，分别为  activated  和  deactivated 。用  keep-alive  包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行  deactivated  钩子函数，命中缓存渲染后会执行  actived  钩子函数。"></a>另外还有  keep-alive  独有的生命周期，分别为  activated  和  deactivated 。用  keep-alive  包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行  deactivated  钩子函数，命中缓存渲染后会执行  actived  钩子函数。</h5><h5 id="最后就是销毁组件的钩子函数-beforeDestroy-和-destroyed。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的-destroyed-钩子函数。"><a href="#最后就是销毁组件的钩子函数-beforeDestroy-和-destroyed。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的-destroyed-钩子函数。" class="headerlink" title="最后就是销毁组件的钩子函数  beforeDestroy  和  destroyed。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的  destroyed  钩子函数。"></a>最后就是销毁组件的钩子函数  beforeDestroy  和  destroyed。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的  destroyed  钩子函数。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;生命周期钩子函数&quot;&gt;&lt;a href=&quot;#生命周期钩子函数&quot; class=&quot;headerlink&quot; title=&quot;生命周期钩子函数&quot;&gt;&lt;/a&gt;生命周期钩子函数&lt;/h3&gt;&lt;h5 id=&quot;在-beforeCreate-钩子函数调用的时候，是获取不到-props-或者-d
      
    
    </summary>
    
    
      <category term="vue" scheme="http://blog.bochunhao.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue_keep-alive</title>
    <link href="http://blog.bochunhao.cn/2018/06/16/vue-keep-alive/"/>
    <id>http://blog.bochunhao.cn/2018/06/16/vue-keep-alive/</id>
    <published>2018-06-16T11:35:08.000Z</published>
    <updated>2019-03-26T06:27:10.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="keep-alive-组件有什么作用"><a href="#keep-alive-组件有什么作用" class="headerlink" title="keep-alive 组件有什么作用"></a>keep-alive 组件有什么作用</h3><h5 id="如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用-keep-alive-组件包裹需要保存的组件。"><a href="#如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用-keep-alive-组件包裹需要保存的组件。" class="headerlink" title="如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用  keep-alive  组件包裹需要保存的组件。"></a>如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用  keep-alive  组件包裹需要保存的组件。</h5><h5 id="对于-keep-alive-组件来说，它拥有两个独有的生命周期钩子函数，分别为-activated-和-deactivated-。用-keep-alive-包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行-deactivated-钩子函数，命中缓存渲染后会执行-actived-钩子函数。"><a href="#对于-keep-alive-组件来说，它拥有两个独有的生命周期钩子函数，分别为-activated-和-deactivated-。用-keep-alive-包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行-deactivated-钩子函数，命中缓存渲染后会执行-actived-钩子函数。" class="headerlink" title="对于  keep-alive  组件来说，它拥有两个独有的生命周期钩子函数，分别为  activated  和  deactivated 。用  keep-alive  包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行  deactivated  钩子函数，命中缓存渲染后会执行  actived  钩子函数。"></a>对于  keep-alive  组件来说，它拥有两个独有的生命周期钩子函数，分别为  activated  和  deactivated 。用  keep-alive  包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行  deactivated  钩子函数，命中缓存渲染后会执行  actived  钩子函数。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;keep-alive-组件有什么作用&quot;&gt;&lt;a href=&quot;#keep-alive-组件有什么作用&quot; class=&quot;headerlink&quot; title=&quot;keep-alive 组件有什么作用&quot;&gt;&lt;/a&gt;keep-alive 组件有什么作用&lt;/h3&gt;&lt;h5 id=&quot;如
      
    
    </summary>
    
    
      <category term="vue" scheme="http://blog.bochunhao.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue_computed_watch</title>
    <link href="http://blog.bochunhao.cn/2018/05/10/vue-computed-watch/"/>
    <id>http://blog.bochunhao.cn/2018/05/10/vue-computed-watch/</id>
    <published>2018-05-10T12:17:10.000Z</published>
    <updated>2019-03-26T06:20:25.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="computed-和-watch-区别"><a href="#computed-和-watch-区别" class="headerlink" title="computed 和 watch 区别"></a>computed 和 watch 区别</h3><h4 id="computed-是计算属性，依赖其他属性计算值，并且-computed-的值有缓存，只有当计算值变化才会返回内容。"><a href="#computed-是计算属性，依赖其他属性计算值，并且-computed-的值有缓存，只有当计算值变化才会返回内容。" class="headerlink" title="computed  是计算属性，依赖其他属性计算值，并且  computed  的值有缓存，只有当计算值变化才会返回内容。"></a>computed  是计算属性，依赖其他属性计算值，并且  computed  的值有缓存，只有当计算值变化才会返回内容。</h4><h4 id="watch-监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。"><a href="#watch-监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。" class="headerlink" title="watch  监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。"></a>watch  监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。</h4><p>所以一般来说需要依赖别的属性来动态获得值的时候可以使用  computed，对于监听到值的变化需要做一些复杂业务逻辑的情况可以使用  watch。</p><h6 id="另外-computed-和-watch-还都支持对象的写法，这种方式知道的人并不多。"><a href="#另外-computed-和-watch-还都支持对象的写法，这种方式知道的人并不多。" class="headerlink" title="另外  computed  和  watch  还都支持对象的写法，这种方式知道的人并不多。"></a>另外  computed  和  watch  还都支持对象的写法，这种方式知道的人并不多。</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vm.<span class="variable">$watch</span>(<span class="string">'obj'</span>, &#123;</span><br><span class="line">    // 深度遍历</span><br><span class="line">    deep: <span class="literal">true</span>,</span><br><span class="line">    // 立即触发</span><br><span class="line">    immediate: <span class="literal">true</span>,</span><br><span class="line">    // 执行的函数</span><br><span class="line">    handler: <span class="keyword">function</span>(val, oldVal) &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123; a: 1 &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    aPlus: &#123;</span><br><span class="line">      // this.aPlus 时触发</span><br><span class="line">      get: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> this.a + 1</span><br><span class="line">      &#125;,</span><br><span class="line">      // this.aPlus = 1 时触发</span><br><span class="line">      <span class="built_in">set</span>: <span class="keyword">function</span> (v) &#123;</span><br><span class="line">        this.a = v - 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;computed-和-watch-区别&quot;&gt;&lt;a href=&quot;#computed-和-watch-区别&quot; class=&quot;headerlink&quot; title=&quot;computed 和 watch 区别&quot;&gt;&lt;/a&gt;computed 和 watch 区别&lt;/h3&gt;&lt;h4 i
      
    
    </summary>
    
    
      <category term="vue" scheme="http://blog.bochunhao.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue_communication</title>
    <link href="http://blog.bochunhao.cn/2018/04/08/vue-communication/"/>
    <id>http://blog.bochunhao.cn/2018/04/08/vue-communication/</id>
    <published>2018-04-08T05:51:48.000Z</published>
    <updated>2019-03-26T06:08:05.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h5 id="组件通信一般分为以下几种情况："><a href="#组件通信一般分为以下几种情况：" class="headerlink" title="组件通信一般分为以下几种情况："></a>组件通信一般分为以下几种情况：</h5><p>父子组件通信<br>兄弟组件通信<br>跨多层级组件通信<br>任意组件</p><h5 id="对于以上每种情况都有多种方式去实现，接下来就来学习下如何实现。"><a href="#对于以上每种情况都有多种方式去实现，接下来就来学习下如何实现。" class="headerlink" title="对于以上每种情况都有多种方式去实现，接下来就来学习下如何实现。"></a>对于以上每种情况都有多种方式去实现，接下来就来学习下如何实现。</h5><h4 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h4><h6 id="父组件通过-props-传递数据给子组件，子组件通过-emit-发送事件传递数据给父组件，这两种方式是最常用的父子通信实现办法。"><a href="#父组件通过-props-传递数据给子组件，子组件通过-emit-发送事件传递数据给父组件，这两种方式是最常用的父子通信实现办法。" class="headerlink" title="父组件通过  props  传递数据给子组件，子组件通过  emit  发送事件传递数据给父组件，这两种方式是最常用的父子通信实现办法。"></a>父组件通过  props  传递数据给子组件，子组件通过  emit  发送事件传递数据给父组件，这两种方式是最常用的父子通信实现办法。</h6><p>这种父子通信方式也就是典型的单向数据流，父组件通过  props  传递数据，子组件不能直接修改  props， 而是必须通过发送事件的方式告知父组件修改数据。</p><h6 id="另外这两种方式还可以使用语法糖-v-model-来直接实现，因为-v-model-默认会解析成名为-value-的-prop-和名为-input-的事件。这种语法糖的方式是典型的双向绑定，常用于-UI-控件上，但是究其根本，还是通过事件的方法让父组件修改数据。"><a href="#另外这两种方式还可以使用语法糖-v-model-来直接实现，因为-v-model-默认会解析成名为-value-的-prop-和名为-input-的事件。这种语法糖的方式是典型的双向绑定，常用于-UI-控件上，但是究其根本，还是通过事件的方法让父组件修改数据。" class="headerlink" title="另外这两种方式还可以使用语法糖  v-model  来直接实现，因为  v-model  默认会解析成名为  value  的  prop  和名为  input  的事件。这种语法糖的方式是典型的双向绑定，常用于 UI 控件上，但是究其根本，还是通过事件的方法让父组件修改数据。"></a>另外这两种方式还可以使用语法糖  v-model  来直接实现，因为  v-model  默认会解析成名为  value  的  prop  和名为  input  的事件。这种语法糖的方式是典型的双向绑定，常用于 UI 控件上，但是究其根本，还是通过事件的方法让父组件修改数据。</h6><p>当然我们还可以通过访问  $parent 或者 $children  对象来访问组件实例中的方法和数据。</p><p>另外如果你使用 Vue 2.3 及以上版本的话还可以使用  \$listeners  和  .sync  这两个属性。</p><h6 id="listeners-属性会将父组件中的-不含-native-修饰器的-v-on-事件监听器传递给子组件，子组件可以通过访问-listeners-来自定义监听器。"><a href="#listeners-属性会将父组件中的-不含-native-修饰器的-v-on-事件监听器传递给子组件，子组件可以通过访问-listeners-来自定义监听器。" class="headerlink" title="$listeners 属性会将父组件中的 (不含 .native 修饰器的) v-on 事件监听器传递给子组件，子组件可以通过访问 $listeners  来自定义监听器。"></a>$listeners 属性会将父组件中的 (不含 .native 修饰器的) v-on 事件监听器传递给子组件，子组件可以通过访问 $listeners  来自定义监听器。</h6><h6 id="sync-属性是个语法糖，可以很简单的实现子组件与父组件通信"><a href="#sync-属性是个语法糖，可以很简单的实现子组件与父组件通信" class="headerlink" title=".sync  属性是个语法糖，可以很简单的实现子组件与父组件通信"></a>.sync  属性是个语法糖，可以很简单的实现子组件与父组件通信</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--父组件中--&gt;</span><br><span class="line">&lt;input :value.sync=<span class="string">"value"</span> /&gt;</span><br><span class="line">&lt;!--以上写法等同于--&gt;</span><br><span class="line">&lt;input :value=<span class="string">"value"</span> @update:value=<span class="string">"v =&gt; value = v"</span>&gt;&lt;/comp&gt;</span><br><span class="line">&lt;!--子组件中--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  this.<span class="variable">$emit</span>(<span class="string">'update:value'</span>, 1)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h4><h6 id="对于这种情况可以通过查找父组件中的子组件实现，也就是-this-parent-children，在-children-中可以通过组件-name-查询到需要的组件实例，然后进行通信。"><a href="#对于这种情况可以通过查找父组件中的子组件实现，也就是-this-parent-children，在-children-中可以通过组件-name-查询到需要的组件实例，然后进行通信。" class="headerlink" title="对于这种情况可以通过查找父组件中的子组件实现，也就是  this.$parent.$children，在  \$children 中可以通过组件  name  查询到需要的组件实例，然后进行通信。"></a>对于这种情况可以通过查找父组件中的子组件实现，也就是  this.$parent.$children，在  \$children 中可以通过组件  name  查询到需要的组件实例，然后进行通信。</h6><h4 id="跨多层次组件通信"><a href="#跨多层次组件通信" class="headerlink" title="跨多层次组件通信"></a>跨多层次组件通信</h4><h6 id="对于这种情况可以使用-Vue-2-2-新增的-API-provide-inject，虽然文档中不推荐直接使用在业务中，但是如果用得好的话还是很有用的。"><a href="#对于这种情况可以使用-Vue-2-2-新增的-API-provide-inject，虽然文档中不推荐直接使用在业务中，但是如果用得好的话还是很有用的。" class="headerlink" title="对于这种情况可以使用 Vue 2.2 新增的 API provide / inject，虽然文档中不推荐直接使用在业务中，但是如果用得好的话还是很有用的。"></a>对于这种情况可以使用 Vue 2.2 新增的 API provide / inject，虽然文档中不推荐直接使用在业务中，但是如果用得好的话还是很有用的。</h6><h5 id="假设有父组件-A，然后有一个跨多层级的子组件-B"><a href="#假设有父组件-A，然后有一个跨多层级的子组件-B" class="headerlink" title="假设有父组件 A，然后有一个跨多层级的子组件 B"></a>假设有父组件 A，然后有一个跨多层级的子组件 B</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 父组件 A</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    data: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 子组件 B</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  inject: [<span class="string">'data'</span>],</span><br><span class="line">  <span class="function"><span class="title">mounted</span></span>() &#123;</span><br><span class="line">    // 无论跨几层都能获得父组件的 data 属性</span><br><span class="line">    console.log(this.data) // =&gt; 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="任意组件"><a href="#任意组件" class="headerlink" title="任意组件"></a>任意组件</h4><h6 id="这种方式可以通过-Vuex-或者-Event-Bus-解决，另外如果你不怕麻烦的话，可以使用这种方式解决上述所有的通信情况"><a href="#这种方式可以通过-Vuex-或者-Event-Bus-解决，另外如果你不怕麻烦的话，可以使用这种方式解决上述所有的通信情况" class="headerlink" title="这种方式可以通过 Vuex 或者 Event Bus 解决，另外如果你不怕麻烦的话，可以使用这种方式解决上述所有的通信情况"></a>这种方式可以通过 Vuex 或者 Event Bus 解决，另外如果你不怕麻烦的话，可以使用这种方式解决上述所有的通信情况</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;组件通信&quot;&gt;&lt;a href=&quot;#组件通信&quot; class=&quot;headerlink&quot; title=&quot;组件通信&quot;&gt;&lt;/a&gt;组件通信&lt;/h3&gt;&lt;h5 id=&quot;组件通信一般分为以下几种情况：&quot;&gt;&lt;a href=&quot;#组件通信一般分为以下几种情况：&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="vue" scheme="http://blog.bochunhao.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue_mixin_mixins</title>
    <link href="http://blog.bochunhao.cn/2018/04/02/vue-mixin-mixins/"/>
    <id>http://blog.bochunhao.cn/2018/04/02/vue-mixin-mixins/</id>
    <published>2018-04-02T06:06:29.000Z</published>
    <updated>2019-03-26T06:07:41.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mixin-和-mixins-区别"><a href="#mixin-和-mixins-区别" class="headerlink" title="mixin 和 mixins 区别"></a>mixin 和 mixins 区别</h3><h6 id="mixin-用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。"><a href="#mixin-用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。" class="headerlink" title="mixin  用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。"></a>mixin  用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span></span>() &#123;</span><br><span class="line">        // ...逻辑</span><br><span class="line">        // 这种方式会影响到每个组件的 beforeCreate 钩子函数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="虽然文档不建议我们在应用中直接使用-mixin，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的-ajax-或者一些工具函数等等。"><a href="#虽然文档不建议我们在应用中直接使用-mixin，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的-ajax-或者一些工具函数等等。" class="headerlink" title="虽然文档不建议我们在应用中直接使用  mixin，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的  ajax  或者一些工具函数等等。"></a>虽然文档不建议我们在应用中直接使用  mixin，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的  ajax  或者一些工具函数等等。</h5><h6 id="mixins-应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过-mixins-混入代码，比如上拉下拉加载数据这种逻辑等等。"><a href="#mixins-应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过-mixins-混入代码，比如上拉下拉加载数据这种逻辑等等。" class="headerlink" title="mixins  应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过  mixins  混入代码，比如上拉下拉加载数据这种逻辑等等。"></a>mixins  应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过  mixins  混入代码，比如上拉下拉加载数据这种逻辑等等。</h6><h6 id="另外需要注意的是-mixins-混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并，具体可以阅读-文档。"><a href="#另外需要注意的是-mixins-混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并，具体可以阅读-文档。" class="headerlink" title="另外需要注意的是  mixins  混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并，具体可以阅读   文档。"></a>另外需要注意的是  mixins  混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并，具体可以阅读   文档。</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mixin-和-mixins-区别&quot;&gt;&lt;a href=&quot;#mixin-和-mixins-区别&quot; class=&quot;headerlink&quot; title=&quot;mixin 和 mixins 区别&quot;&gt;&lt;/a&gt;mixin 和 mixins 区别&lt;/h3&gt;&lt;h6 id=&quot;mixin
      
    
    </summary>
    
    
      <category term="vue" scheme="http://blog.bochunhao.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>REACT_组件通信</title>
    <link href="http://blog.bochunhao.cn/2018/03/25/react_fscom/"/>
    <id>http://blog.bochunhao.cn/2018/03/25/react_fscom/</id>
    <published>2018-03-25T14:25:58.000Z</published>
    <updated>2019-03-25T14:59:16.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><h5 id="父组件通过-props-传递数据给子组件，子组件通过调用父组件传来的函数传递数据给父组件，这两种方式是最常用的父子通信实现办法。这种父子通信方式也就是典型的单向数据流，父组件通过-props-传递数据，子组件不能直接修改-props，-而是必须通过调用父组件函数的方式告知父组件修改数据。"><a href="#父组件通过-props-传递数据给子组件，子组件通过调用父组件传来的函数传递数据给父组件，这两种方式是最常用的父子通信实现办法。这种父子通信方式也就是典型的单向数据流，父组件通过-props-传递数据，子组件不能直接修改-props，-而是必须通过调用父组件函数的方式告知父组件修改数据。" class="headerlink" title="父组件通过  props  传递数据给子组件，子组件通过调用父组件传来的函数传递数据给父组件，这两种方式是最常用的父子通信实现办法。这种父子通信方式也就是典型的单向数据流，父组件通过  props  传递数据，子组件不能直接修改  props， 而是必须通过调用父组件函数的方式告知父组件修改数据。"></a>父组件通过  props  传递数据给子组件，子组件通过调用父组件传来的函数传递数据给父组件，这两种方式是最常用的父子通信实现办法。这种父子通信方式也就是典型的单向数据流，父组件通过  props  传递数据，子组件不能直接修改  props， 而是必须通过调用父组件函数的方式告知父组件修改数据。</h5><h3 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h3><h5 id="对于这种情况可以通过共同的父组件来管理状态和事件函数。比如说其中一个兄弟组件调用父组件传递过来的事件函数修改父组件中的状态，然后父组件将状态传递给另一个兄弟组件。"><a href="#对于这种情况可以通过共同的父组件来管理状态和事件函数。比如说其中一个兄弟组件调用父组件传递过来的事件函数修改父组件中的状态，然后父组件将状态传递给另一个兄弟组件。" class="headerlink" title="对于这种情况可以通过共同的父组件来管理状态和事件函数。比如说其中一个兄弟组件调用父组件传递过来的事件函数修改父组件中的状态，然后父组件将状态传递给另一个兄弟组件。"></a>对于这种情况可以通过共同的父组件来管理状态和事件函数。比如说其中一个兄弟组件调用父组件传递过来的事件函数修改父组件中的状态，然后父组件将状态传递给另一个兄弟组件。</h5><h3 id="跨多层次组件通信"><a href="#跨多层次组件通信" class="headerlink" title="跨多层次组件通信"></a>跨多层次组件通信</h3><h5 id="如果你使用-16-3-以上版本的话，对于这种情况可以使用-Context-API。"><a href="#如果你使用-16-3-以上版本的话，对于这种情况可以使用-Context-API。" class="headerlink" title="如果你使用 16.3 以上版本的话，对于这种情况可以使用 Context API。"></a>如果你使用 16.3 以上版本的话，对于这种情况可以使用 Context API。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 创建 Context，可以在开始就传入值</span><br><span class="line">const StateContext = React.createContext()</span><br><span class="line">class Parent extends React.Component &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">      // value 就是传入 Context 中的值</span><br><span class="line">      &lt;StateContext.Provider value=<span class="string">'yck'</span>&gt;</span><br><span class="line">        &lt;Child /&gt;</span><br><span class="line">      &lt;/StateContext.Provider&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Child extends React.Component &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">      &lt;ThemeContext.Consumer&gt;</span><br><span class="line">        // 取出值</span><br><span class="line">        &#123;context =&gt; (</span><br><span class="line">          name is &#123; context &#125;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/ThemeContext.Consumer&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;父子组件通信&quot;&gt;&lt;a href=&quot;#父子组件通信&quot; class=&quot;headerlink&quot; title=&quot;父子组件通信&quot;&gt;&lt;/a&gt;父子组件通信&lt;/h3&gt;&lt;h5 id=&quot;父组件通过-props-传递数据给子组件，子组件通过调用父组件传来的函数传递数据给父组件，这两种方
      
    
    </summary>
    
    
      <category term="react" scheme="http://blog.bochunhao.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>REACT_setState</title>
    <link href="http://blog.bochunhao.cn/2018/03/22/setStarte/"/>
    <id>http://blog.bochunhao.cn/2018/03/22/setStarte/</id>
    <published>2018-03-22T12:33:57.000Z</published>
    <updated>2019-03-25T15:33:50.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><h3 id="setState-在-React-中是经常使用的一个-API，但是它存在一些的问题经常会导致初学者出错，核心原因就是因为这个-API-是异步的。首先-setState-的调用并不会马上引起-state-的改变，并且如果你一次调用了多个-setState-，那么结果可能并不如你期待的一样。"><a href="#setState-在-React-中是经常使用的一个-API，但是它存在一些的问题经常会导致初学者出错，核心原因就是因为这个-API-是异步的。首先-setState-的调用并不会马上引起-state-的改变，并且如果你一次调用了多个-setState-，那么结果可能并不如你期待的一样。" class="headerlink" title="setState 在 React 中是经常使用的一个 API，但是它存在一些的问题经常会导致初学者出错，核心原因就是因为这个 API 是异步的。首先  setState  的调用并不会马上引起  state  的改变，并且如果你一次调用了多个  setState ，那么结果可能并不如你期待的一样。"></a>setState 在 React 中是经常使用的一个 API，但是它存在一些的问题经常会导致初学者出错，核心原因就是因为这个 API 是异步的。首先  setState  的调用并不会马上引起  state  的改变，并且如果你一次调用了多个  setState ，那么结果可能并不如你期待的一样。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handle</span></span>() &#123;</span><br><span class="line">  // 初始化 `count` 为 0</span><br><span class="line">  console.log(this.state.count) // -&gt; 0</span><br><span class="line">  this.setState(&#123; count: this.state.count + 1 &#125;)</span><br><span class="line">  this.setState(&#123; count: this.state.count + 1 &#125;)</span><br><span class="line">  this.setState(&#123; count: this.state.count + 1 &#125;)</span><br><span class="line">  console.log(this.state.count) // -&gt; 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一，两次的打印都为-0，因为-setState-是个异步-API，只有同步代码运行完毕才会执行。setState-异步的原因我认为在于，setState-可能会导致-DOM-的重绘，如果调用一次就马上去进行重绘，那么调用多次就会造成不必要的性能损失。设计成异步的话，就可以将多次调用放入一个队列中，在恰当的时候统一进行更新过程。"><a href="#第一，两次的打印都为-0，因为-setState-是个异步-API，只有同步代码运行完毕才会执行。setState-异步的原因我认为在于，setState-可能会导致-DOM-的重绘，如果调用一次就马上去进行重绘，那么调用多次就会造成不必要的性能损失。设计成异步的话，就可以将多次调用放入一个队列中，在恰当的时候统一进行更新过程。" class="headerlink" title="第一，两次的打印都为 0，因为  setState  是个异步 API，只有同步代码运行完毕才会执行。setState  异步的原因我认为在于，setState  可能会导致 DOM 的重绘，如果调用一次就马上去进行重绘，那么调用多次就会造成不必要的性能损失。设计成异步的话，就可以将多次调用放入一个队列中，在恰当的时候统一进行更新过程。"></a>第一，两次的打印都为 0，因为  setState  是个异步 API，只有同步代码运行完毕才会执行。setState  异步的原因我认为在于，setState  可能会导致 DOM 的重绘，如果调用一次就马上去进行重绘，那么调用多次就会造成不必要的性能损失。设计成异步的话，就可以将多次调用放入一个队列中，在恰当的时候统一进行更新过程。</h3><h3 id="第二，虽然调用了三次-setState-，但是-count-的值还是为-1。因为多次调用会合并为一次，只有当更新结束后-state-才会改变，三次调用等同于如下代码"><a href="#第二，虽然调用了三次-setState-，但是-count-的值还是为-1。因为多次调用会合并为一次，只有当更新结束后-state-才会改变，三次调用等同于如下代码" class="headerlink" title="第二，虽然调用了三次  setState ，但是  count  的值还是为 1。因为多次调用会合并为一次，只有当更新结束后  state  才会改变，三次调用等同于如下代码"></a>第二，虽然调用了三次  setState ，但是  count  的值还是为 1。因为多次调用会合并为一次，只有当更新结束后  state  才会改变，三次调用等同于如下代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object.assign(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123; count: this.state.count + 1 &#125;,</span><br><span class="line">  &#123; count: this.state.count + 1 &#125;,</span><br><span class="line">  &#123; count: this.state.count + 1 &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="当然你也可以通过以下方式来实现调用三次-setState-使得-count-为-3"><a href="#当然你也可以通过以下方式来实现调用三次-setState-使得-count-为-3" class="headerlink" title="当然你也可以通过以下方式来实现调用三次  setState  使得  count  为 3"></a>当然你也可以通过以下方式来实现调用三次  setState  使得  count  为 3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handle</span></span>() &#123;</span><br><span class="line">  this.setState((prevState) =&gt; (&#123; count: prevState.count + 1 &#125;))</span><br><span class="line">  this.setState((prevState) =&gt; (&#123; count: prevState.count + 1 &#125;))</span><br><span class="line">  this.setState((prevState) =&gt; (&#123; count: prevState.count + 1 &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果你想在每次调用-setState-后获得正确的-state-，可以通过如下代码实现"><a href="#如果你想在每次调用-setState-后获得正确的-state-，可以通过如下代码实现" class="headerlink" title="如果你想在每次调用  setState  后获得正确的  state ，可以通过如下代码实现"></a>如果你想在每次调用  setState  后获得正确的  state ，可以通过如下代码实现</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handle</span></span>() &#123;</span><br><span class="line">    this.setState((prevState) =&gt; (&#123; count: prevState.count + 1 &#125;), () =&gt; &#123;</span><br><span class="line">        console.log(this.state)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;setState&quot;&gt;&lt;a href=&quot;#setState&quot; class=&quot;headerlink&quot; title=&quot;setState&quot;&gt;&lt;/a&gt;setState&lt;/h2&gt;&lt;h3 id=&quot;setState-在-React-中是经常使用的一个-API，但是它存在一些的问题
      
    
    </summary>
    
      <category term="react" scheme="http://blog.bochunhao.cn/categories/react/"/>
    
    
      <category term="react" scheme="http://blog.bochunhao.cn/tags/react/"/>
    
  </entry>
  
</feed>
